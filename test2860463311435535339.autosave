interface Cell{
  void display(int c, int d);
  void connectWith(Neighbor neighbor);
}

abstract class CellLocation implements Cell {
  float x, y;   // x,y location
  float w, h;   // width and height

  CellLocation(float x, float y, float w, float h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }
}

import java.util.*;
class City extends CellLocation {

  // A cell object knows about its location in the grid as well as its size with the variables x, y, w, h.
  private String letter;  // angle for oscillating brightness
  private float centerX, centerY;
  private ArrayList<Neighbor> neighbors;

  // Cell Constructor
  City(float x, float y, float w, float h, String letter) {
    super(x,y,w,h);
    this.letter = letter;
    centerX = x+(w/2);
    centerY = y+(h/2);
    neighbors = new ArrayList<Neighbor>();
  }

  float getCenterX() {
    return centerX;
  }

  float getCenterY() {
    return centerY;
  }

  String getLetter() {
    return letter;
  }

  void display(int c, int d) {
    stroke(255);
    strokeWeight(1);
    if(c != -1) {
      fill(c);
      rect(x,y,w/2,h);
    }
    if(d != -1) {
      fill(d);
      rect(x+w/2,y,w/2,h);
    }
    fill(0);
    textSize(w/1.25);
    textAlign(CENTER,TOP);
    text(letter, x, y, w, h);
  }

  void connectWith(Neighbor neighbor) {
    City city = neighbor.getCity();
    if(isConnectedWith(city)) {
      return;
    }
    displayConnection(city, neighbor);
    neighbors.add(neighbor);
    city.connectWith(new Neighbor(this,neighbor.getDistance(null, DistanceHeuristic.he)));
  }

  void displayConnection(City city, Neighbor neighbor) {
    stroke(0);
    strokeWeight(2);
    line(centerX,centerY,city.getCenterX(),city.getCenterY());
    fill(50);
    textSize(w/1.25);
    textAlign(CENTER,CENTER);
    text(Integer.toString((int)neighbor.getDistance(null, DistanceHeuristic.he)),x-(w/2),y-(w/2),city.getCenterX()-centerX+w,city.getCenterY()-centerY+h);
  }

  boolean isConnectedWith(City city) {
    //TODO: finish this use ds
    for(int i = 0; i < neighbors.size(); i++) {
      Neighbor neighbor = neighbors.get(i);
      if(neighbor.getCity().getLetter() == city.getLetter()){
        return true;
      }
    }
    return false;
  }

  ArrayList<Neighbor> getNeighbors() {
    return neighbors;
  }

  boolean equals(City city) {
    if(city.getLetter() == this.letter){
      return true;
    }
    return false;
  }
}

class Neighbor {
  private City city;
  private double distance;
  public int depth;

  Neighbor(City city, double distance) {
    this.city = city;
    this.distance = distance;
  }

  Neighbor(City city, double distance, int depth) {
    this.city = city;
    this.distance = distance;
    this.depth = depth;
  }

  double getDistance(City goal, DistanceHeuristic heuristic) {
    if(goal != null)
    {
      switch (heuristic) {
        case h0:
          return getConstant0();
        case hm:
          return getManhattanDistanceBetween(this.city, goal);
        case he:
          return getEucledianDistanceBetween(this.city, goal);
      }
    }
    return distance;
  }

  City getCity() {
    return city;
  }

  void print() {
    println(city.getLetter() + " distance: " + Double.toString(distance));
  }
}

// Actual code
//import java.util.Arrays;
City[] cities;
SearchAlgorithm algorithm;
static final SearchAlgo algo = SearchAlgo.GBFS;
static final DistanceHeuristic heur = DistanceHeuristic.h0;

enum SearchAlgo {
    BFS, DFS, GBFS, ASTAR, IDS
}

// Number of columns and rows in the grid
int mapSize = 100;
int numLetters = 26;

void setup() {
  size(1500, 1500);
  cities = new City[numLetters];

  for (int i = 0; i < numLetters; i++) {
    int rx = (int)random(mapSize);
    int ry = (int)random(mapSize);
    float suffix = width/mapSize;
    char letter = 'A';
    cities[i] = new City(rx*suffix, ry*suffix, suffix, suffix, Character.toString(((char)(letter + i))));
  }

  for(City city : cities) {
    Neighbor[] closest = getClosestCitiesTo(city, 5);
    knuthShuffle(closest);
    int rand = (int)random(1,5);
    for(int i = 0; i < rand; i++) {
      city.connectWith(closest[i]);
    }
  }

  for(City city : cities) {
    // println("For city " + city.getLetter());
    // for(Object neighbor : city.getNeighbors()) {
    //   Neighbor n = neighbor;
    //   n.print();
    // }
    city.display(255,255);
  }
  //TODO: choose start and end city/state
  int startCity = (int)random(numLetters);
  int endCity = (int)random(numLetters);
  City startNode = cities[startCity];
  City endNode = cities[endCity];

  startNode.display(200,200);
  endNode.display(200,200);
  startNode.display(100,-1);
  endNode.display(-1,100);
  println("Starting Node: " + startNode.letter);

  frameRate(0.2);
  switch(algo) {
    case BFS:
      algorithm = new BreadthFirstSearch(startNode, endNode);
      break;
    case DFS:
      algorithm = new DepthFirstSearch(startNode, endNode);
      break;
    case IDS:
      algorithm = new IterativeDeepeningSearch(startNode, endNode);
      break;
    case GBFS:
      algorithm = new GreedyBestFirstSearch(startNode, endNode, heur);
      break;
    case ASTAR:
      algorithm = new AStar(startNode, endNode, heur);
      break;
  }
}

boolean stopSearch = false;
void draw() {
  //TODO: do search algorithms
  if(!stopSearch) {
    stopSearch = algorithm.compute();
    algorithm.display();
  }
}

Neighbor[] getClosestCitiesTo(City city, int howMany) {
  double[] distances = new double[numLetters];
  for(int i = 0; i < numLetters; i++) {
    City c = cities[i];
    double dist = getEucledianDistanceBetween(city,c);
    distances[i] = dist;
  }

  int largest = distances.length - 1;
  long mask = -1l;
  while ((~mask & largest) != largest) mask <<= 1;
  for (int i = 0; i < distances.length; ++i)
    distances[i] = Double.longBitsToDouble(
                    Double.doubleToLongBits(distances[i]) & mask | i);
  Arrays.sort(distances);
  
  Neighbor[] closestCities = new Neighbor[howMany];
  for(int i = 1; i <= howMany;i++) {
    closestCities[i-1] = new Neighbor(cities[(int) (Double.doubleToLongBits(distances[i]) & ~mask)], distances[i]);
  }
  return closestCities;
}

enum DistanceHeuristic {
    h0, hm, he
}

double getEucledianDistanceBetween(City city1, City city2) {
  float x2 = sq(city1.getCenterX() - city2.getCenterX());
  float y2 = sq(city1.getCenterY() - city2.getCenterY());
  return (double)sqrt(x2 + y2);
}

double getManhattanDistanceBetween(City city1, City city2) {
  return Math.abs(city2.getCenterX()-city1.getCenterX()) + Math.abs(city2.getCenterY()-city1.getCenterY());
}

double getConstant0() {
  return 0;
}

//import java.util.Random;
public static final Random gen = new Random();
public static void knuthShuffle (Object[] array) {
    int n = array.length;
    while (n > 1) {
        int k = gen.nextInt(n--);
        Object temp = array[n];
        array[n] = array[k];
        array[k] = temp;
    }
}


//Search algos
interface SearchAlgorithm {
  boolean compute();
  void display();
}

abstract class SearchClass implements SearchAlgorithm {
  City startNode;
  City goalNode;
  ArrayList<City> visitedNodes;

  SearchClass (City start, City goal) {
    startNode = start;
    goalNode = goal;
    visitedNodes = new ArrayList<City>();
    
    // if(startNode.equals(goalNode)){
    //     System.out.println("Goal Node Found at 0 depth");
    //     System.out.println(startNode);
    // }
  }

  <T> boolean alreadyVisited(T n, Collection<T> col) {
    for(T node : col) {
      if(node.equals(n)) {
        return true;
      }
    }
    return false;
  }

  void display() {
    for(City c : visitedNodes) {
      c.display(100,100);
      print(c.getLetter());
    }
    println("");
  }
}

class BreadthFirstSearch extends SearchClass {
    Queue<Neighbor> queue;

    BreadthFirstSearch(City start, City goal){
      super(start,goal);
      queue = new LinkedList<Neighbor>();
      queue.add(new Neighbor(startNode,0));
    }

    boolean compute(){
        if(!queue.isEmpty()){
            Neighbor current = queue.remove();
            City currentCity = current.getCity();
            if(currentCity.equals(goalNode)) {
              visitedNodes.add(currentCity);
              println("Goal Node Found!");
              return true;
            }
            else{
                ArrayList<Neighbor> neighbors = currentCity.getNeighbors();
                if(neighbors.isEmpty())
                    return false;
                else {
                  for(Neighbor n : neighbors) {
                    if(alreadyVisited(n, queue) || alreadyVisited(n.getCity(), visitedNodes))
                      continue;
                    queue.add(n);
                  }
                }
            }
            visitedNodes.add(currentCity);
        }
        else {
          println(visitedNodes);
          return true;
        }
        return false;
    }
}

class DepthFirstSearch extends SearchClass {
  Stack<Neighbor> nodeStack;
  public DepthFirstSearch(City start, City goal) {
      super(start, goal);
      nodeStack = new Stack<Neighbor>();
      nodeStack.add(new Neighbor(startNode,0));
  }

  public boolean compute() {
    if(!nodeStack.isEmpty()) {
      Neighbor current = nodeStack.pop();
      City currentCity = current.getCity();
      if(current.equals(goalNode)){
        visitedNodes.add(currentCity);
        println("Goal node found");
        return true;
      }
      else {
        visitedNodes.add(currentCity);
        for(Neighbor n : currentCity.getNeighbors()) {
          if(alreadyVisited(n, nodeStack) || alreadyVisited(n.getCity(), visitedNodes))
                continue;
          nodeStack.add(n);
        }
      }
    }
    else {
      println(visitedNodes);
      return true;
    }
    return false;
  }
}

class DepthLimitedSearch extends SearchClass {
  Stack<Neighbor> nodeStack;
  int limit = 0;
  boolean success = false;

  public DepthLimitedSearch(City start, City goal) {
    super(start, goal);
    nodeStack = new Stack<Neighbor>();
    nodeStack.add(new Neighbor(startNode,0,0));
  }

  public boolean compute() {
    if(!nodeStack.isEmpty()) {
        Neighbor current = nodeStack.pop();
        City currentCity = current.getCity();
        if (currentCity.equals(goalNode)) {
          visitedNodes.add(currentCity);
          println("Goal node found");
          success = true;
          return success;
        } else {
          visitedNodes.add(currentCity);
          if(current.depth < limit) {
            for(Neighbor n : currentCity.getNeighbors()) {
              if(alreadyVisited(n, nodeStack) || alreadyVisited(n.getCity(), visitedNodes))
                continue;
              n.depth = current.depth + 1;
              nodeStack.add(n);
            }
          }
        }
    } else {
      println("Goal Node not found within depth limit");
      nodeStack.add(new Neighbor(startNode,0,0));
      visitedNodes = new ArrayList<City>();
      return true;
    }
    return false;
  }
}

class IterativeDeepeningSearch extends SearchClass {
  int limit = 0;
  DepthLimitedSearch dls;

  public IterativeDeepeningSearch(City start, City goal) {
    super(start,goal);
    dls = new DepthLimitedSearch(start,goal);
  }

  public boolean compute() {
    dls.limit = limit;
    if(dls.compute()) {
      limit++;
      return dls.success;
    }
    return false;
  }

  @Override
  void display() {
    dls.display();
  }
}

import java.util.Comparator;
public class GBFSComparator implements Comparator<Neighbor>
{
  DistanceHeuristic h;
  City goal;

  public GBFSComparator(DistanceHeuristic h, City goal) {
    this.h = h;
    this.goal = goal;
  }

  @Override
  public int compare(Neighbor x, Neighbor y)
  {
    return (int)(x.getDistance(goal,h) - y.getDistance(goal,h));
  }
}

public class AStarComparator implements Comparator<Neighbor>
{
  DistanceHeuristic h;
  City goal;

  public AStarComparator(DistanceHeuristic h, City goal) {
    this.h = h;
    this.goal = goal;
  }

  @Override
  public int compare(Neighbor x, Neighbor y)
  {
    double xdist = x.getDistance(null,h) + x.getDistance(goal,h);
    double ydist = y.getDistance(null,h) + y.getDistance(goal,h);

    return (int)(xdist - ydist);
  }
}

abstract class BestFirstSearch extends SearchClass {
  PriorityQueue<Neighbor> queue;

  public BestFirstSearch(City start, City goal, Comparator<Neighbor> comp) {
    super(start,goal);
    Comparator<Neighbor> comparator = comp;
    queue = new PriorityQueue<Neighbor>(numLetters, comparator);
    queue.add(new Neighbor(startNode,0));
  }

  boolean compute(){
    if(!queue.isEmpty()){
      Neighbor current = queue.poll();
      City currentCity = current.getCity();
      if(currentCity.equals(goalNode)) {
        visitedNodes.add(currentCity);
        println("Goal Node Found!");
        return true;
      }
      else{
        for(Neighbor n : currentCity.getNeighbors()) {
          if(alreadyVisited(n, queue) || alreadyVisited(n.getCity(), visitedNodes))
            continue;
          queue.add(n);
        }
      }
      visitedNodes.add(currentCity);
    }
    else {
      println(visitedNodes);
      return true;
    }
    return false;
  }
}

class GreedyBestFirstSearch extends BestFirstSearch {
  public GreedyBestFirstSearch(City start, City goal, DistanceHeuristic h) {
    super(start, goal, new GBFSComparator(h, goal));
  }
}

class AStar extends BestFirstSearch {
  public AStar(City start, City goal, DistanceHeuristic h) {
    super(start, goal, new AStarComparator(h ,goal));
  }
}
